################## Paths to ignore during linting. Takes precedence over `included`
excluded:

  - Carthage
  - Pods

################## Only the rules specified in this list will be enabled
whitelist_rules:

### Idiomatic Rules #########################################################

  # Prefer the new block based KVO API with keypaths when using Swift 3.2 or later.
  - block_based_kvo

  # Explicitly calling .init() should be avoided.
  - explicit_init

  # Top-level declarations should specify Access Control Level keywords explicitly.
#  - explicit_top_level_acl

  # Properties should have a type interface
#  - explicit_type_interface

  # Prefer to use extension access modifiers
  - extension_access_modifier

  # A fatalError call should have a message.
  - fatal_error_message

  # where clauses are preferred over a single if inside a for.
  - for_where

  # Force casts should be avoided.
#  - force_cast

  # Force tries should be avoided.
#  - force_try

  # Force unwrapping should be avoided.
#  - force_unwrapping

  # Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length.
  - generic_type_name

  # Implicitly unwrapped optionals should be avoided when possible.
#  - implicitly_unwrapped_optional

  # Discouraged explicit usage of the default separator.
  - joined_default_parameter

  # Struct extension properties and methods are preferred over legacy functions
  - legacy_cggeometry_functions

  # Struct-scoped constants are preferred over legacy global constants.
  - legacy_constant

  # Swift constructors are preferred over legacy convenience functions.
  - legacy_constructor

  # Struct extension properties and methods are preferred over legacy functions
  - legacy_nsgeometry_functions

  # Prefer Nimble operator overloads over free matcher functions.
  - nimble_operator

  # Prefer not to use extension access modifiers
  - no_extension_access_modifier

  # Prefer object literals over image and color inits.
  - object_literal

  # Prefer private over fileprivate declarations.
#  - private_over_fileprivate

  # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - redundant_nil_coalescing

  # Initializing an optional variable with nil is redundant.
  - redundant_optional_initialization

  # String enum values can be omitted when they are equal to the enumcase name.
  - redundant_string_enum_value

  # Returning Void in a function declaration is redundant.
  - redundant_void_return

  # fileprivate should be avoided.
#  - strict_fileprivate

  # Shorthand syntactic sugar should be used, i.e. [Int] instead of Array
  - syntactic_sugar

  # Lines should not have trailing semicolons.
  - trailing_semicolon

  # Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length.
  - type_name

  # When the index or the item is not used, .enumerated() can be removed.
  - unused_enumerated

  # An XCTFail call should include a description of the assertion.
  - xctfail_message

### Lint Rules #########################################################

  # Delegate protocols should be class-only so they can be weakly referenced.
  - class_delegate_protocol

  # The initializers declared in compiler protocols such as ExpressibleByArrayLiteral shouldn't be called directly.
  - compiler_protocol_init

  # When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.
  - discarded_notification_center_observer

  # Discouraged direct initialization of types that can be harmful.
  - discouraged_direct_init

  # Avoid using 'dynamic' and '@inline(__always)' together.
  - dynamic_inline

  # MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'
  - mark

  # An object should only remove itself as an observer in deinit.
  - notification_center_detachment

  # Some overridden methods should always call super
  - overridden_super_call

  # IBOutlets should be private to avoid leaking UIKit to higher layers.
  - private_outlet

  # Unit tests marked private are silently skipped.
  - private_unit_test

  # Some methods should not call super
  - prohibited_super_call

  # Discouraged call inside 'describe' and/or 'context' block.
  - quick_discouraged_call

  # SwiftLint 'disable' commands are superfluous when the disabled rule would not have triggered a violation in the disabled region.
  - superfluous_disable_command

  # TODOs and FIXMEs should be avoided.
#  - todo

  # Unused parameter in a closure should be replaced with _.
  - unused_closure_parameter

  # @IBInspectable should be applied to variables only, have its type explicit and be of a supported type
  - valid_ibinspectable

  # Delegates should be weak to avoid reference cycles.
  - weak_delegate

### Metrics Rules #########################################################

  # Complexity of function bodies should be limited.
  - cyclomatic_complexity

  # Files should not span too many lines.
  - file_length

  # Functions bodies should not span too many lines.
  - function_body_length

  # Number of function parameters should be low.
  - function_parameter_count

  # Tuples shouldn't have too many members. Create a custom type instead.
  - large_tuple

  # Lines should not span too many characters.
#  - line_length

  # Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.
  - nesting

  # Type bodies should not span too many lines.
  - type_body_length

### Performance Rules #########################################################

  # Prefer checking isEmpty over comparing count to zero.
  - empty_count

  # Prefer using .first(where:) over .filter { }.first in collections.
  - first_where

### Style Rules #########################################################

  # Attributes should be on their own lines in functions and types, but on the same line as variables and imports.
  - attributes

  # Closing brace with closing parenthesis should not have any whitespaces in the middle.
  - closing_brace

  # Closure end should have the same indentation as the line that started it.
  - closure_end_indentation

  # Closure parameters should be on the same line as opening brace.
  - closure_parameter_position

  # Closure expressions should have a single space inside each brace.
  - closure_spacing

  # Colons should be next to the identifier when specifying a type and next to the key in dictionary literals.
  - colon

  # There should be no space before and one after any comma.
  - comma

  # Conditional statements should always return on the next line.
  - conditional_returns_on_newline

  # if,for,while,do statements shouldn't wrap their conditionals in parentheses.
  - control_statement

  # Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display.
  - custom_rules

  # Arguments can be omitted when matching enums with associated types if they are not used.
  - empty_enum_arguments

  # Prefer () -> over Void ->
  - empty_parameters

  # When using trailing closures, empty parentheses should be avoided after the method call.
  - empty_parentheses_with_trailing_closure

  # Header comments should be consistent with project patterns.
#  - file_header

  # Identifier names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short.
  - identifier_name

  # Computed read-only properties should avoid using the get keyword.
  - implicit_getter

  # Prefer implicit returns in closures.
  - implicit_return

  # Files should not contain leading whitespace.
  - leading_whitespace

  # Let and var should be separated from other statements by a blank line.
  - let_var_whitespace

  # Functions and methods parameters should be either on the same line, or one per line.
  - multiline_parameters

  # Underscores should be used as thousand separator in large decimal numbers.
  - number_separator

  # Opening braces should be preceded by a single space and on the same line as the declaration.
  - opening_brace

  # Operators should be surrounded by a single whitespace when they are being used.
  - operator_usage_whitespace

  # Operators should be surrounded by a single whitespace when defining them.
  - operator_whitespace

  # When declaring properties in protocols, the order of accessors should be get set.
  - protocol_property_accessors_order

  # Prefer _ = foo() over let _ = foo() when discarding a result from a function.
  - redundant_discardable_let

  # Return arrow and return type should be separated by a single space or on a separate line.
  - return_arrow_whitespace

  # Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning.
  - shorthand_operator

  # Test files should contain a single QuickSpec or XCTestCase class.
  - single_test_class

  # Imports should be sorted.
  - sorted_imports

  # Else and catch should be on the same line, one space after the previous declaration.
  - statement_position

  # Cases inside a switch should always be on a newline
  - switch_case_on_newline

  # Trailing closure syntax should be used whenever possible.
  - trailing_closure

  # Trailing commas in arrays and dictionaries should be avoided/enforced.
  - trailing_comma

  # Files should have a single trailing newline.
  - trailing_newline

  # Lines should not have trailing whitespace.
#  - trailing_whitespace

  # Parentheses are not needed when declaring closure arguments.
  - unneeded_parentheses_in_closure_argument

  # Prefer != nil over let _ =
  - unused_optional_binding

  # Function parameters should be aligned vertically if they're in multiple lines in a declaration.
  - vertical_parameter_alignment

  # Function parameters should be aligned vertically if they're in multiple lines in a method call.
  - vertical_parameter_alignment_on_call

  # Limit vertical whitespace to a single empty line.
#  - vertical_whitespace

  # Prefer -> Void over -> ().
  - void_return

################## Rules Options
identifier_name:
  excluded:
    - id

number_separator:
  minimum_length: 5